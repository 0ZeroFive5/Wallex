"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _electron = require("electron");

var _electronWallpaper = _interopRequireDefault(require("../electronWallpaper"));

var _path = _interopRequireDefault(require("path"));

var _fs = _interopRequireDefault(require("fs"));

_electron.app.allowRendererProcessReuse = true;
var wallpaperWindows = [];
var tray;
var currentScreen;
var currentScreenIdx;
var screens;

var pathToData = _electron.app.getPath('userData');

var pathsToWallpapers = [];

var loadWallpapers = function loadWallpapers() {
  try {
    var dirRaw = _fs["default"].readdirSync(_path["default"].join(pathToData, 'wallpapers'), {
      withFileTypes: true
    });

    dirRaw.forEach(function (dir) {
      if (!dir.isDirectory()) {
        return;
      }

      pathsToWallpapers.push({
        path: _path["default"].join(pathToData, 'wallpapers', dir.name, 'index.html'),
        name: dir.name
      });
    });
  } catch (_unused) {
    _fs["default"].mkdirSync(_path["default"].join(pathToData, 'wallpapers'));
  }
};

loadWallpapers(); // Initial load

var getOffsetX = function getOffsetX() {
  if (!currentScreen || currentScreenIdx === null || !screens) {
    throw Error("Current screen is unset!");
  }

  if (currentScreenIdx === 0) {
    return 0;
  } else {
    var screensToTheLeft = screens.slice(0, currentScreenIdx);
    return screensToTheLeft.reduce(function (sum, item) {
      return sum + item.bounds.width;
    }, 0); // My trial and error approach to windows positioning system
  }
};

var destroyWallpaper = function destroyWallpaper(idx) {
  if (wallpaperWindows[idx]) {
    wallpaperWindows[idx].close();
    wallpaperWindows = wallpaperWindows.filter(function (_, index) {
      return index !== idx;
    });
  }
};

var createWallpaperWindow = function createWallpaperWindow(pathToWallpaper) {
  if (!currentScreen || currentScreenIdx === null || !screens) {
    throw Error("Current screen is unset!");
  }

  wallpaperWindows[currentScreenIdx] = new _electron.BrowserWindow({
    width: 1000,
    // Initial value cuz electron || windows (I don't know what's the problem at this point)
    height: 1000,
    // Initial value cuz electron || windows (I don't know what's the problem at this point)
    autoHideMenuBar: true,
    frame: false,
    transparent: true // webPreferences: {
    //   nodeIntegration: true,
    //   contextIsolation: false,
    //   enableRemoteModule: true
    // }, // 3 fucking lines cuz electron is "SECURE" now
    // The lines above allow node modules in wallpapers

  });
  wallpaperWindows[currentScreenIdx].loadFile(pathToWallpaper);

  _electronWallpaper["default"].attachWindow(wallpaperWindows[currentScreenIdx], getOffsetX(), currentScreen.bounds.y, currentScreen.bounds.width, currentScreen.bounds.height);
};

var setCurrentScreen = function setCurrentScreen(idx, pathToWallpaper) {
  if (!screens) {
    throw Error("Screens hasn't been initialized!");
  }

  currentScreen = screens[idx];
  currentScreenIdx = idx;
  destroyWallpaper(idx);
  createWallpaperWindow(pathToWallpaper);
};

var createTray = function createTray() {
  if (!screens) {
    throw Error("Screens hasn't been initialized!");
  }

  tray = new _electron.Tray(_path["default"].join(__dirname, '../public/logo.png'));

  var ctxMenu = _electron.Menu.buildFromTemplate([].concat((0, _toConsumableArray2["default"])(screens.map(function (_, idx) {
    return {
      label: "Screen ".concat(idx + 1),
      type: 'submenu',
      submenu: [{
        label: 'Disable',
        type: 'normal',
        click: function click() {
          return destroyWallpaper(idx);
        }
      }].concat((0, _toConsumableArray2["default"])(pathsToWallpapers.map(function (item) {
        return {
          label: item.name,
          type: 'normal',
          click: function click() {
            return setCurrentScreen(idx, item.path);
          }
        };
      })))
    };
  })), [// Allows the user to pick a wallpaper for each screen
  {
    label: 'wallpapers',
    type: 'normal',
    click: function click() {
      _electron.dialog.showOpenDialog({
        title: 'Add your wallpaper',
        defaultPath: _path["default"].join(pathToData, 'wallpapers'),
        buttonLabel: '-->'
      }).then(function () {
        var _tray;

        pathsToWallpapers.length = 0;
        loadWallpapers();
        (_tray = tray) === null || _tray === void 0 ? void 0 : _tray.destroy();
        createTray();
      }); // Should refresh the wallpapers

    }
  }, {
    label: 'quit',
    type: 'normal',
    click: function click() {
      wallpaperWindows.map(function (_, idx) {
        return destroyWallpaper(idx);
      });

      _electron.app.quit();
    }
  }]));

  tray.setToolTip('Wallex');
  tray.setContextMenu(ctxMenu);
};

_electron.app.on('ready', function () {
  screens = _electron.screen.getAllDisplays().sort(function (a, b) {
    return a.bounds.x - b.bounds.x;
  }); // Electron can't into multi display setups

  createTray();
});

_electron.app.on('window-all-closed', function () {}); // Overwrites the default exit behaviour
//# sourceMappingURL=data:application/json;charset=utf-8;base64,