"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _electron = require("electron");

var _electronWallpaper = _interopRequireDefault(require("../electronWallpaper"));

var _path = _interopRequireDefault(require("path"));

_electron.app.allowRendererProcessReuse = true;
var wallpaperWindow;
var tray;
var currentScreen;
var currentScreenIdx;
var screens;

var getOffsetX = function getOffsetX() {
  if (!currentScreen || currentScreenIdx === null || !screens) {
    throw Error("Current screen is unset!");
  }

  if (currentScreenIdx === 0) {
    return 0;
  } else {
    var screensToTheLeft = screens.slice(0, currentScreenIdx);
    return screensToTheLeft.reduce(function (sum, item) {
      return sum + item.bounds.width;
    }, 0); // My trial and error approach to windows positioning system
  }
};

var destroyWallpaper = function destroyWallpaper() {
  if (wallpaperWindow) {
    wallpaperWindow.close();
    wallpaperWindow = null;
  }
};

var createWallpaperWindow = function createWallpaperWindow() {
  if (!currentScreen || currentScreenIdx === null || !screens) {
    throw Error("Current screen is unset!");
  }

  wallpaperWindow = new _electron.BrowserWindow({
    width: 1000,
    // Initial value cuz electron || windows (I don't know what's the problem at this point)
    height: 1000,
    // Initial value cuz electron || windows (I don't know what's the problem at this point)
    autoHideMenuBar: true,
    frame: false,
    transparent: true // webPreferences: {
    //   nodeIntegration: true,
    //   contextIsolation: false,
    //   enableRemoteModule: true
    // }, // 3 fucking lines cuz electron is "SECURE" now
    // The lines above allow node modules in wallpapers

  });
  wallpaperWindow.loadFile('../public/dashboard.html');

  _electronWallpaper["default"].attachWindow(wallpaperWindow, getOffsetX(), currentScreen.bounds.y, currentScreen.bounds.width, currentScreen.bounds.height);
};

var setCurrentScreen = function setCurrentScreen(idx) {
  if (!screens) {
    throw Error("Screens hasn't been initialized!");
  }

  currentScreen = screens[idx];
  currentScreenIdx = idx;
  destroyWallpaper();
  createWallpaperWindow();
};

var createTray = function createTray() {
  if (!screens) {
    throw Error("Screens hasn't been initialized!");
  }

  tray = new _electron.Tray(_path["default"].join(__dirname, '../public/logo.png'));

  var ctxMenu = _electron.Menu.buildFromTemplate([{
    label: 'display',
    type: 'submenu',
    submenu: (0, _toConsumableArray2["default"])(screens.map(function (_, idx) {
      return {
        label: idx.toString(),
        type: 'normal',
        click: function click() {
          return setCurrentScreen(idx);
        }
      };
    }))
  }, // This creates a menu entry for every monitor available in the system. TODO: allow multiply monitors
  {
    label: 'quit',
    type: 'normal',
    click: function click() {
      destroyWallpaper();

      _electron.app.quit();
    }
  }]);

  tray.setToolTip('Wallex');
  tray.setContextMenu(ctxMenu);
};

_electron.app.on('ready', function () {
  screens = _electron.screen.getAllDisplays().sort(function (a, b) {
    return a.bounds.x - b.bounds.x;
  }); // Electron can't into multi display setups

  createTray();
});

_electron.app.on('window-all-closed', function () {
  return console.log("Hello4");
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9pbmRleC50cyJdLCJuYW1lcyI6WyJhcHAiLCJhbGxvd1JlbmRlcmVyUHJvY2Vzc1JldXNlIiwid2FsbHBhcGVyV2luZG93IiwidHJheSIsImN1cnJlbnRTY3JlZW4iLCJjdXJyZW50U2NyZWVuSWR4Iiwic2NyZWVucyIsImdldE9mZnNldFgiLCJFcnJvciIsInNjcmVlbnNUb1RoZUxlZnQiLCJzbGljZSIsInJlZHVjZSIsInN1bSIsIml0ZW0iLCJib3VuZHMiLCJ3aWR0aCIsImRlc3Ryb3lXYWxscGFwZXIiLCJjbG9zZSIsImNyZWF0ZVdhbGxwYXBlcldpbmRvdyIsIkJyb3dzZXJXaW5kb3ciLCJoZWlnaHQiLCJhdXRvSGlkZU1lbnVCYXIiLCJmcmFtZSIsInRyYW5zcGFyZW50IiwibG9hZEZpbGUiLCJlbGVjdHJvbldhbGxwYXBlciIsImF0dGFjaFdpbmRvdyIsInkiLCJzZXRDdXJyZW50U2NyZWVuIiwiaWR4IiwiY3JlYXRlVHJheSIsIlRyYXkiLCJwYXRoIiwiam9pbiIsIl9fZGlybmFtZSIsImN0eE1lbnUiLCJNZW51IiwiYnVpbGRGcm9tVGVtcGxhdGUiLCJsYWJlbCIsInR5cGUiLCJzdWJtZW51IiwibWFwIiwiXyIsInRvU3RyaW5nIiwiY2xpY2siLCJxdWl0Iiwic2V0VG9vbFRpcCIsInNldENvbnRleHRNZW51Iiwib24iLCJzY3JlZW4iLCJnZXRBbGxEaXNwbGF5cyIsInNvcnQiLCJhIiwiYiIsIngiLCJjb25zb2xlIiwibG9nIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQTs7QUFDQTs7QUFDQTs7QUFHQUEsY0FBSUMseUJBQUosR0FBZ0MsSUFBaEM7QUFFQSxJQUFJQyxlQUFKO0FBQ0EsSUFBSUMsSUFBSjtBQUNBLElBQUlDLGFBQUo7QUFDQSxJQUFJQyxnQkFBSjtBQUVBLElBQUlDLE9BQUo7O0FBRUEsSUFBTUMsVUFBVSxHQUFHLFNBQWJBLFVBQWEsR0FBTTtBQUN2QixNQUFJLENBQUNILGFBQUQsSUFBa0JDLGdCQUFnQixLQUFL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REosUUFBQUEsSUFBSSxFQUFFLFFBRmlEO0FBR3ZESyxRQUFBQSxLQUFLLEVBQUU7QUFBQSxpQkFBTWhCLGdCQUFnQixDQUFDQyxHQUFELENBQXRCO0FBQUE7QUFIZ0QsT0FBekM7QUFBQSxLQUFaLENBRHNDO0FBQTVDLEdBRHFDLEVBT2hDO0FBQ0w7QUFBRVMsSUFBQUEsS0FBSyxFQUFFLE1BQVQ7QUFBaUJDLElBQUFBLElBQUksRUFBRSxRQUF2QjtBQUFpQ0ssSUFBQUEsS0FBSyxFQUFFLGlCQUFNO0FBQUU1QixNQUFBQSxnQkFBZ0I7O0FBQUloQixvQkFBSTZDLElBQUo7QUFBWTtBQUFoRixHQVJxQyxDQUF2QixDQUFoQjs7QUFVQTFDLEVBQUFBLElBQUksQ0FBQzJDLFVBQUwsQ0FBZ0IsUUFBaEI7QUFDQTNDLEVBQUFBLElBQUksQ0FBQzRDLGNBQUwsQ0FBb0JaLE9BQXBCO0FBQ0QsQ0FqQkQ7O0FBb0JBbkMsY0FBSWdELEVBQUosQ0FBTyxPQUFQLEVBQWdCLFlBQU07QUFDcEIxQyxFQUFBQSxPQUFPLEdBQUcyQyxpQkFBT0MsY0FBUCxHQUF3QkMsSUFBeEIsQ0FBNkIsVUFBQ0MsQ0FBRCxFQUFJQyxDQUFKO0FBQUEsV0FBVUQsQ0FBQyxDQUFDdEMsTUFBRixDQUFTd0MsQ0FBVCxHQUFhRCxDQUFDLENBQUN2QyxNQUFGLENBQVN3QyxDQUFoQztBQUFBLEdBQTdCLENBQVYsQ0FEb0IsQ0FDdUQ7O0FBQzNFeEIsRUFBQUEsVUFBVTtBQUNYLENBSEQ7O0FBS0E5QixjQUFJZ0QsRUFBSixDQUFPLG1CQUFQLEVBQTRCO0FBQUEsU0FBTU8sT0FBTyxDQUFDQyxHQUFSLENBQVksUUFBWixDQUFOO0FBQUEsQ0FBNUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge2FwcCwgTWVudSwgVHJheSwgQnJvd3NlcldpbmRvdywgc2NyZWVuLCBNZW51SXRlbUNvbnN0cnVjdG9yT3B0aW9uc30gZnJvbSAnZWxlY3Ryb24nO1xyXG5pbXBvcnQgZWxlY3Ryb25XYWxscGFwZXIgZnJvbSAnLi4vZWxlY3Ryb25XYWxscGFwZXInO1xyXG5pbXBvcnQgcGF0aCBmcm9tICdwYXRoJztcclxuXHJcblxyXG5hcHAuYWxsb3dSZW5kZXJlclByb2Nlc3NSZXVzZSA9IHRydWU7XHJcblxyXG5sZXQgd2FsbHBhcGVyV2luZG93OiBudWxsIHwgQnJvd3NlcldpbmRvdztcclxubGV0IHRyYXk6IFRyYXkgfCBudWxsO1xyXG5sZXQgY3VycmVudFNjcmVlbjogRWxlY3Ryb24uRGlzcGxheSB8IG51bGw7XHJcbmxldCBjdXJyZW50U2NyZWVuSWR4OiBudW1iZXIgfCBudWxsO1xyXG5cclxubGV0IHNjcmVlbnM6IEVsZWN0cm9uLkRpc3BsYXlbXSB8IG51bGw7XHJcblxyXG5jb25zdCBnZXRPZmZzZXRYID0gKCkgPT4ge1xyXG4gIGlmICghY3VycmVudFNjcmVlbiB8fCBjdXJyZW50U2NyZWVuSWR4ID09PSBudWxsIHx8ICFzY3JlZW5zKSB7XHJcbiAgICB0aHJvdyBFcnJvcihcIkN1cnJlbnQgc2NyZWVuIGlzIHVuc2V0IVwiKTtcclxuICB9XHJcbiAgaWYgKGN1cnJlbnRTY3JlZW5JZHggPT09IDApIHtcclxuICAgIHJldHVybiAwO1xyXG4gIH0gZWxzZSB7XHJcbiAgICBjb25zdCBzY3JlZW5zVG9UaGVMZWZ0ID0gc2NyZWVucy5zbGljZSgwLCBjdXJyZW50U2NyZWVuSWR4KTtcclxuICAgIHJldHVybiBzY3JlZW5zVG9UaGVMZWZ0LnJlZHVjZSgoc3VtLCBpdGVtKSA9PiBzdW0gKyBpdGVtLmJvdW5kcy53aWR0aCwgMCk7IC8vIE15IHRyaWFsIGFuZCBlcnJvciBhcHByb2FjaCB0byB3aW5kb3dzIHBvc2l0aW9uaW5nIHN5c3RlbVxyXG4gIH1cclxufVxyXG5cclxuY29uc3QgZGVzdHJveVdhbGxwYXBlciA9ICgpID0+IHtcclxuICBpZiAod2FsbHBhcGVyV2luZG93KSB7XHJcbiAgICB3YWxscGFwZXJXaW5kb3cuY2xvc2UoKTtcclxuICAgIHdhbGxwYXBlcldpbmRvdyA9IG51bGw7XHJcbiAgfVxyXG59XHJcblxyXG5jb25zdCBjcmVhdGVXYWxscGFwZXJXaW5kb3cgPSBmdW5jdGlvbigpIHtcclxuICBpZiAoIWN1cnJlbnRTY3JlZW4gfHwgY3VycmVudFNjcmVlbklkeCA9PT0gbnVsbCB8fCAhc2NyZWVucykge1xyXG4gICAgdGhyb3cgRXJyb3IoXCJDdXJyZW50IHNjcmVlbiBpcyB1bnNldCFcIik7XHJcbiAgfVxyXG4gIHdhbGxwYXBlcldpbmRvdyA9IG5ldyBCcm93c2VyV2luZG93KHtcclxuICAgIHdpZHRoOiAxMDAwLCAvLyBJbml0aWFsIHZhbHVlIGN1eiBlbGVjdHJvbiB8fCB3aW5kb3dzIChJIGRvbid0IGtub3cgd2hhdCdzIHRoZSBwcm9ibGVtIGF0IHRoaXMgcG9pbnQpXHJcbiAgICBoZWlnaHQ6IDEwMDAsIC8vIEluaXRpYWwgdmFsdWUgY3V6IGVsZWN0cm9uIHx8IHdpbmRvd3MgKEkgZG9uJ3Qga25vdyB3aGF0J3MgdGhlIHByb2JsZW0gYXQgdGhpcyBwb2ludClcclxuICAgIGF1dG9IaWRlTWVudUJhcjogdHJ1ZSxcclxuICAgIGZyYW1lOiBmYWxzZSxcclxuICAgIHRyYW5zcGFyZW50OiB0cnVlLFxyXG4gICAgLy8gd2ViUHJlZmVyZW5jZXM6IHtcclxuICAgIC8vICAgbm9kZUludGVncmF0aW9uOiB0cnVlLFxyXG4gICAgLy8gICBjb250ZXh0SXNvbGF0aW9uOiBmYWxzZSxcclxuICAgIC8vICAgZW5hYmxlUmVtb3RlTW9kdWxlOiB0cnVlXHJcbiAgICAvLyB9LCAvLyAzIGZ1Y2tpbmcgbGluZXMgY3V6IGVsZWN0cm9uIGlzIFwiU0VDVVJFXCIgbm93XHJcbiAgICAvLyBUaGUgbGluZXMgYWJvdmUgYWxsb3cgbm9kZSBtb2R1bGVzIGluIHdhbGxwYXBlcnNcclxuICB9KTtcclxuICB3YWxscGFwZXJXaW5kb3cubG9hZEZpbGUoJy4uL3B1YmxpYy9kYXNoYm9hcmQuaHRtbCcpO1xyXG4gIGVsZWN0cm9uV2FsbHBhcGVyLmF0dGFjaFdpbmRvdyh3YWxscGFwZXJXaW5kb3csIGdldE9mZnNldFgoKSxcclxuICAgIGN1cnJlbnRTY3JlZW4uYm91bmRzLnksIGN1cnJlbnRTY3JlZW4uYm91bmRzLndpZHRoLCBjdXJyZW50U2NyZWVuLmJvdW5kcy5oZWlnaHQpO1xyXG59O1xyXG5cclxuY29uc3Qgc2V0Q3VycmVudFNjcmVlbiA9IChpZHg6IG51bWJlcikgPT4ge1xyXG4gIGlmICghc2NyZWVucykge1xyXG4gICAgdGhyb3cgRXJyb3IoXCJTY3JlZW5zIGhhc24ndCBiZWVuIGluaXRpYWxpemVkIVwiKTtcclxuICB9XHJcbiAgY3VycmVudFNjcmVlbiA9IHNjcmVlbnNbaWR4XTtcclxuICBjdXJyZW50U2NyZWVuSWR4ID0gaWR4O1xyXG4gIGRlc3Ryb3lXYWxscGFwZXIoKTtcclxuICBjcmVhdGVXYWxscGFwZXJXaW5kb3coKTtcclxufVxyXG5cclxuY29uc3QgY3JlYXRlVHJheSA9ICgpID0+IHtcclxuICBpZiAoIXNjcmVlbnMpIHtcclxuICAgIHRocm93IEVycm9yKFwiU2NyZWVucyBoYXNuJ3QgYmVlbiBpbml0aWFsaXplZCFcIik7XHJcbiAgfVxyXG4gIHRyYXkgPSBuZXcgVHJheShwYXRoLmpvaW4oX19kaXJuYW1lLCAnLi4vcHVibGljL2xvZ28ucG5nJykpO1xyXG4gIGNvbnN0IGN0eE1lbnUgPSBNZW51LmJ1aWxkRnJvbVRlbXBsYXRlKFtcclxuICAgIHsgbGFiZWw6ICdkaXNwbGF5JywgdHlwZTogJ3N1Ym1lbnUnLCBzdWJtZW51OiBbXHJcbiAgICAgIC4uLihzY3JlZW5zLm1hcCgoXywgaWR4KTogTWVudUl0ZW1Db25zdHJ1Y3Rvck9wdGlvbnMgPT4gKHtcclxuICAgICAgICBsYWJlbDogaWR4LnRvU3RyaW5nKCksXHJcbiAgICAgICAgdHlwZTogJ25vcm1hbCcsXHJcbiAgICAgICAgY2xpY2s6ICgpID0+IHNldEN1cnJlbnRTY3JlZW4oaWR4KVxyXG4gICAgICB9KSkpXHJcbiAgICBdIH0sIC8vIFRoaXMgY3JlYXRlcyBhIG1lbnUgZW50cnkgZm9yIGV2ZXJ5IG1vbml0b3IgYXZhaWxhYmxlIGluIHRoZSBzeXN0ZW0uIFRPRE86IGFsbG93IG11bHRpcGx5IG1vbml0b3JzXHJcbiAgICB7IGxhYmVsOiAncXVpdCcsIHR5cGU6ICdub3JtYWwnLCBjbGljazogKCkgPT4geyBkZXN0cm95V2FsbHBhcGVyKCk7IGFwcC5xdWl0KCkgfSB9XHJcbiAgXSk7XHJcbiAgdHJheS5zZXRUb29sVGlwKCdXYWxsZXgnKTtcclxuICB0cmF5LnNldENvbnRleHRNZW51KGN0eE1lbnUpO1xyXG59XHJcblxyXG5cclxuYXBwLm9uKCdyZWFkeScsICgpID0+IHtcclxuICBzY3JlZW5zID0gc2NyZWVuLmdldEFsbERpc3BsYXlzKCkuc29ydCgoYSwgYikgPT4gYS5ib3VuZHMueCAtIGIuYm91bmRzLngpOyAvLyBFbGVjdHJvbiBjYW4ndCBpbnRvIG11bHRpIGRpc3BsYXkgc2V0dXBzXHJcbiAgY3JlYXRlVHJheSgpO1xyXG59KTtcclxuXHJcbmFwcC5vbignd2luZG93LWFsbC1jbG9zZWQnLCAoKSA9PiBjb25zb2xlLmxvZyhcIkhlbGxvNFwiKSkiXX0=